/*
 * generated by Xtext
 */
package fr.inria.lang.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
 import com.google.inject.Inject;
 import fr.inria.lang.services.LuaConfigFileGrammarAccess
 import org.eclipse.xtext.Keyword

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class LuaConfigFileFormatter extends AbstractDeclarativeFormatter {

	@Inject extension LuaConfigFileGrammarAccess
	
	override protected void configureFormatting(FormattingConfig c) {
// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
//		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
//		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
//		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	// mao 16/02/2014 They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		//mao 16/02/2014 forcing new line before the assignment
    	c.setLinewrap().before(assignmentRule)
    	//mao 16/02/2014 forcing new line before the generatedComment
    	c.setLinewrap().before(generatedCommentRule)

		c.setAutoLinewrap(120);
		
		//mao 14/02/2014 quita espacios entre puntos del assignement feature.attribute
        for (Keyword dotBetweenFeatureAndAttribute : findKeywords(".")) {
      		c.setNoSpace().around(dotBetweenFeatureAndAttribute);
      	}
	}
}
