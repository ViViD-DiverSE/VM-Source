/*
* generated by Xtext
*/
grammar InternalLuaConfigFile;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.inria.lang.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.inria.lang.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.inria.lang.services.LuaConfigFileGrammarAccess;

}

@parser::members {
 
 	private LuaConfigFileGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LuaConfigFileGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLuaConfigFile
entryRuleLuaConfigFile 
:
{ before(grammarAccess.getLuaConfigFileRule()); }
	 ruleLuaConfigFile
{ after(grammarAccess.getLuaConfigFileRule()); } 
	 EOF 
;

// Rule LuaConfigFile
ruleLuaConfigFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getLuaConfigFileAccess().getRowsAssignment()); }
(rule__LuaConfigFile__RowsAssignment)
{ after(grammarAccess.getLuaConfigFileAccess().getRowsAssignment()); }
)
(
{ before(grammarAccess.getLuaConfigFileAccess().getRowsAssignment()); }
(rule__LuaConfigFile__RowsAssignment)*
{ after(grammarAccess.getLuaConfigFileAccess().getRowsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGeneratedComment
entryRuleGeneratedComment 
:
{ before(grammarAccess.getGeneratedCommentRule()); }
	 ruleGeneratedComment
{ after(grammarAccess.getGeneratedCommentRule()); } 
	 EOF 
;

// Rule GeneratedComment
ruleGeneratedComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneratedCommentAccess().getGroup()); }
(rule__GeneratedComment__Group__0)
{ after(grammarAccess.getGeneratedCommentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReal
entryRuleReal 
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealAccess().getGroup()); }
(rule__Real__Group__0)
{ after(grammarAccess.getRealAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getGroup()); }
(rule__Integer__Group__0)
{ after(grammarAccess.getIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__LuaConfigFile__RowsAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLuaConfigFileAccess().getRowsGeneratedCommentParserRuleCall_0_0()); }
	ruleGeneratedComment
{ after(grammarAccess.getLuaConfigFileAccess().getRowsGeneratedCommentParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getLuaConfigFileAccess().getRowsAssignmentParserRuleCall_0_1()); }
	ruleAssignment
{ after(grammarAccess.getLuaConfigFileAccess().getRowsAssignmentParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueRealParserRuleCall_3_0_0()); }
	ruleReal
{ after(grammarAccess.getAssignmentAccess().getValueRealParserRuleCall_3_0_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getValueIntegerParserRuleCall_3_0_1()); }
	ruleInteger
{ after(grammarAccess.getAssignmentAccess().getValueIntegerParserRuleCall_3_0_1()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getValueMYCHARTerminalRuleCall_3_0_2()); }
	RULE_MYCHAR
{ after(grammarAccess.getAssignmentAccess().getValueMYCHARTerminalRuleCall_3_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratedComment__ValueAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratedCommentAccess().getValueMYCOMMENTTerminalRuleCall_1_0_0()); }
	RULE_MYCOMMENT
{ after(grammarAccess.getGeneratedCommentAccess().getValueMYCOMMENTTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getGeneratedCommentAccess().getValueIntegerParserRuleCall_1_0_1()); }
	ruleInteger
{ after(grammarAccess.getGeneratedCommentAccess().getValueIntegerParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_0()); }
(rule__Assignment__Group_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAttributeAssignment_1()); }
(rule__Assignment__AttributeAssignment_1)
{ after(grammarAccess.getAssignmentAccess().getAttributeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
(rule__Assignment__ValueAssignment_3)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignment__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__0__Impl
	rule__Assignment__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFeatureAssignment_0_0()); }
(rule__Assignment__FeatureAssignment_0_0)
{ after(grammarAccess.getAssignmentAccess().getFeatureAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getAssignmentAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GeneratedComment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneratedComment__Group__0__Impl
	rule__GeneratedComment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratedComment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratedCommentAccess().getHyphenMinusHyphenMinusKeyword_0()); }

	'--' 

{ after(grammarAccess.getGeneratedCommentAccess().getHyphenMinusHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GeneratedComment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneratedComment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratedComment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratedCommentAccess().getValueAssignment_1()); }
(rule__GeneratedComment__ValueAssignment_1)
{ after(grammarAccess.getGeneratedCommentAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Real__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__0__Impl
	rule__Real__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getRealAccess().getIntegerParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__1__Impl
	rule__Real__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getRealAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getRealAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LuaConfigFile__RowsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLuaConfigFileAccess().getRowsAlternatives_0()); }
(rule__LuaConfigFile__RowsAlternatives_0)
{ after(grammarAccess.getLuaConfigFileAccess().getRowsAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__FeatureAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getFeatureMYCHARTerminalRuleCall_0_0_0()); }
	RULE_MYCHAR{ after(grammarAccess.getAssignmentAccess().getFeatureMYCHARTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AttributeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAttributeMYCHARTerminalRuleCall_1_0()); }
	RULE_MYCHAR{ after(grammarAccess.getAssignmentAccess().getAttributeMYCHARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAlternatives_3_0()); }
(rule__Assignment__ValueAlternatives_3_0)
{ after(grammarAccess.getAssignmentAccess().getValueAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratedComment__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratedCommentAccess().getValueAlternatives_1_0()); }
(rule__GeneratedComment__ValueAlternatives_1_0)
{ after(grammarAccess.getGeneratedCommentAccess().getValueAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_MYCHAR : ('a'..'z'|'A'..'Z')+;

RULE_MYCOMMENT : ('a'..'z'|'A'..'Z'|':'|' ')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


