/*
* generated by Xtext
*/
package fr.inria.lang.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.inria.lang.services.LuaConfigFileGrammarAccess;

public class LuaConfigFileParser extends AbstractContentAssistParser {
	
	@Inject
	private LuaConfigFileGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.inria.lang.ui.contentassist.antlr.internal.InternalLuaConfigFileParser createParser() {
		fr.inria.lang.ui.contentassist.antlr.internal.InternalLuaConfigFileParser result = new fr.inria.lang.ui.contentassist.antlr.internal.InternalLuaConfigFileParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLuaConfigFileAccess().getRowsAlternatives_0(), "rule__LuaConfigFile__RowsAlternatives_0");
					put(grammarAccess.getAssignmentAccess().getValueAlternatives_3_0(), "rule__Assignment__ValueAlternatives_3_0");
					put(grammarAccess.getGeneratedCommentAccess().getValueAlternatives_1_0(), "rule__GeneratedComment__ValueAlternatives_1_0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup_0(), "rule__Assignment__Group_0__0");
					put(grammarAccess.getGeneratedCommentAccess().getGroup(), "rule__GeneratedComment__Group__0");
					put(grammarAccess.getRealAccess().getGroup(), "rule__Real__Group__0");
					put(grammarAccess.getIntegerAccess().getGroup(), "rule__Integer__Group__0");
					put(grammarAccess.getLuaConfigFileAccess().getRowsAssignment(), "rule__LuaConfigFile__RowsAssignment");
					put(grammarAccess.getAssignmentAccess().getFeatureAssignment_0_0(), "rule__Assignment__FeatureAssignment_0_0");
					put(grammarAccess.getAssignmentAccess().getAttributeAssignment_1(), "rule__Assignment__AttributeAssignment_1");
					put(grammarAccess.getAssignmentAccess().getValueAssignment_3(), "rule__Assignment__ValueAssignment_3");
					put(grammarAccess.getGeneratedCommentAccess().getValueAssignment_1(), "rule__GeneratedComment__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.inria.lang.ui.contentassist.antlr.internal.InternalLuaConfigFileParser typedParser = (fr.inria.lang.ui.contentassist.antlr.internal.InternalLuaConfigFileParser) parser;
			typedParser.entryRuleLuaConfigFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LuaConfigFileGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LuaConfigFileGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
