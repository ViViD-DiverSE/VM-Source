/*
* generated by Xtext
*/
package fr.inria.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LuaConfigFileGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LuaConfigFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LuaConfigFile");
		private final Assignment cRowsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cRowsAlternatives_0 = (Alternatives)cRowsAssignment.eContents().get(0);
		private final RuleCall cRowsGeneratedCommentParserRuleCall_0_0 = (RuleCall)cRowsAlternatives_0.eContents().get(0);
		private final RuleCall cRowsAssignmentParserRuleCall_0_1 = (RuleCall)cRowsAlternatives_0.eContents().get(1);
		
		//LuaConfigFile:
		//	rows+=(GeneratedComment | Assignment)+;
		public ParserRule getRule() { return rule; }

		//rows+=(GeneratedComment | Assignment)+
		public Assignment getRowsAssignment() { return cRowsAssignment; }

		//GeneratedComment | Assignment
		public Alternatives getRowsAlternatives_0() { return cRowsAlternatives_0; }

		//GeneratedComment
		public RuleCall getRowsGeneratedCommentParserRuleCall_0_0() { return cRowsGeneratedCommentParserRuleCall_0_0; }

		//Assignment
		public RuleCall getRowsAssignmentParserRuleCall_0_1() { return cRowsAssignmentParserRuleCall_0_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFeatureMYCHARTerminalRuleCall_0_0_0 = (RuleCall)cFeatureAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeMYCHARTerminalRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueRealParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueIntegerParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueMYCHARTerminalRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		
		//Assignment:
		//	(feature=MYCHAR ".") attribute=MYCHAR "=" value=(Real | Integer | MYCHAR);
		public ParserRule getRule() { return rule; }

		//(feature=MYCHAR ".") attribute=MYCHAR "=" value=(Real | Integer | MYCHAR)
		public Group getGroup() { return cGroup; }

		//feature=MYCHAR "."
		public Group getGroup_0() { return cGroup_0; }

		//feature=MYCHAR
		public Assignment getFeatureAssignment_0_0() { return cFeatureAssignment_0_0; }

		//MYCHAR
		public RuleCall getFeatureMYCHARTerminalRuleCall_0_0_0() { return cFeatureMYCHARTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//attribute=MYCHAR
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//MYCHAR
		public RuleCall getAttributeMYCHARTerminalRuleCall_1_0() { return cAttributeMYCHARTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=(Real | Integer | MYCHAR)
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Real | Integer | MYCHAR
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }

		//Real
		public RuleCall getValueRealParserRuleCall_3_0_0() { return cValueRealParserRuleCall_3_0_0; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_3_0_1() { return cValueIntegerParserRuleCall_3_0_1; }

		//MYCHAR
		public RuleCall getValueMYCHARTerminalRuleCall_3_0_2() { return cValueMYCHARTerminalRuleCall_3_0_2; }
	}

	public class GeneratedCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeneratedComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueMYCOMMENTTerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueIntegerParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		
		//GeneratedComment:
		//	"--" value=(MYCOMMENT | Integer);
		public ParserRule getRule() { return rule; }

		//"--" value=(MYCOMMENT | Integer)
		public Group getGroup() { return cGroup; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusKeyword_0; }

		//value=(MYCOMMENT | Integer)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//MYCOMMENT | Integer
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//MYCOMMENT
		public RuleCall getValueMYCOMMENTTerminalRuleCall_1_0_0() { return cValueMYCOMMENTTerminalRuleCall_1_0_0; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_1_0_1() { return cValueIntegerParserRuleCall_1_0_1; }
	}

	public class RealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Real");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Real:
		//	Integer "." INT;
		public ParserRule getRule() { return rule; }

		//Integer "." INT
		public Group getGroup() { return cGroup; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private LuaConfigFileElements pLuaConfigFile;
	private AssignmentElements pAssignment;
	private GeneratedCommentElements pGeneratedComment;
	private TerminalRule tMYCHAR;
	private TerminalRule tMYCOMMENT;
	private RealElements pReal;
	private IntegerElements pInteger;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LuaConfigFileGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.lang.LuaConfigFile".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LuaConfigFile:
	//	rows+=(GeneratedComment | Assignment)+;
	public LuaConfigFileElements getLuaConfigFileAccess() {
		return (pLuaConfigFile != null) ? pLuaConfigFile : (pLuaConfigFile = new LuaConfigFileElements());
	}
	
	public ParserRule getLuaConfigFileRule() {
		return getLuaConfigFileAccess().getRule();
	}

	//Assignment:
	//	(feature=MYCHAR ".") attribute=MYCHAR "=" value=(Real | Integer | MYCHAR);
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//GeneratedComment:
	//	"--" value=(MYCOMMENT | Integer);
	public GeneratedCommentElements getGeneratedCommentAccess() {
		return (pGeneratedComment != null) ? pGeneratedComment : (pGeneratedComment = new GeneratedCommentElements());
	}
	
	public ParserRule getGeneratedCommentRule() {
		return getGeneratedCommentAccess().getRule();
	}

	//terminal MYCHAR:
	//	("a".."z" | "A".."Z")+;
	public TerminalRule getMYCHARRule() {
		return (tMYCHAR != null) ? tMYCHAR : (tMYCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MYCHAR"));
	} 

	//terminal MYCOMMENT:
	//	("a".."z" | "A".."Z" | ":" | " ")+;
	public TerminalRule getMYCOMMENTRule() {
		return (tMYCOMMENT != null) ? tMYCOMMENT : (tMYCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MYCOMMENT"));
	} 

	//Real:
	//	Integer "." INT;
	public RealElements getRealAccess() {
		return (pReal != null) ? pReal : (pReal = new RealElements());
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Integer:
	//	"-"? INT;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
